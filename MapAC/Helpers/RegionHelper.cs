using MapAC.Helpers;
using System.Collections.Generic;
using System.Drawing;

namespace MapAC
{
    public static class RegionHelper
    {

        /// <summary>
        /// Generated by sampling the textures for each terrain type
        /// </summary>
        /// <returns></returns>
        public static Dictionary<int, MapColor> GetMapColors()
        {
            Dictionary<int, MapColor> colors = new Dictionary<int, MapColor>();
            colors.Add(0, new MapColor(102, 88, 72)); // 0 - BarrenRock - 0x06006d6f
            colors.Add(1, new MapColor(89, 94, 47)); // 1 - Grassland - 0x06006d40
            colors.Add(2, new MapColor(175, 179, 178)); // 2 - Ice - 0x06006d4b
            colors.Add(3, new MapColor(95, 94, 36)); // 3 - LushGrass - 0x06006d06
            colors.Add(4, new MapColor(67, 47, 20)); // 4 - MarshSparseSwamp - 0x06006d4a
            colors.Add(5, new MapColor(56, 39, 21)); // 5 - MudRichDirt - 0x06006d46
            colors.Add(6, new MapColor(23, 17, 27)); // 6 - ObsidianPlain - 0x06006d56
            colors.Add(7, new MapColor(112, 84, 50)); // 7 - PackedDirt - 0x06006d48
            colors.Add(8, new MapColor(98, 80, 58)); // 8 - PatchyDirt - 0x06006d42
            colors.Add(9, new MapColor(70, 72, 36)); // 9 - PatchyGrassland - 0x06006d3c
            colors.Add(10, new MapColor(215, 155, 103)); // 10 - sand-yellow - 0x06006d43
            colors.Add(11, new MapColor(148, 129, 107)); // 11 - sand-grey - 0x06006d44
            colors.Add(12, new MapColor(183, 144, 109)); // 12 - sand-rockStrewn - 0x06006d53
            colors.Add(13, new MapColor(151, 121, 87)); // 13 - SedimentaryRock - 0x06006d51
            colors.Add(14, new MapColor(88, 82, 55)); // 14 - SemiBarrenRock - 0x06006d41
            colors.Add(15, new MapColor(191, 196, 201)); // 15 - Snow - 0x06006d47
            colors.Add(16, new MapColor(35, 76, 110)); // 16 - WaterRunning - 0x06006d4d
            colors.Add(17, new MapColor(21, 68, 80)); // 17 - WaterStandingFresh - 0x06006d45
            colors.Add(18, new MapColor(36, 41, 68)); // 18 - WaterShallowSea - 0x06006d4f
            colors.Add(19, new MapColor(31, 63, 57)); // 19 - WaterShallowStillSea - 0x06006d4c
            colors.Add(20, new MapColor(31, 35, 62)); // 20 - WaterDeepSea - 0x06006d4e
            colors.Add(21, new MapColor(90, 95, 41)); // 21 - forestfloor - 0x06006d49
            colors.Add(22, new MapColor(35, 76, 110)); // 22 - FauxWaterRunning - 0x06006d4d
            colors.Add(23, new MapColor(70, 90, 66)); // 23 - SeaSlime - 0x06006d55
            colors.Add(24, new MapColor(102, 88, 72)); // 24 - Argila - 0x06006d6f
            colors.Add(25, new MapColor(28, 19, 23)); // 25 - Volcano1 - 0x06006d54
            colors.Add(26, new MapColor(103, 103, 103)); // 26 - Volcano2 - 0x06006d6a
            colors.Add(27, new MapColor(127, 164, 163)); // 27 - BlueIce - 0x06006d50
            colors.Add(28, new MapColor(70, 72, 36)); // 28 - Moss - 0x06006d3c
            colors.Add(29, new MapColor(65, 54, 22)); // 29 - DarkMoss - 0x06006d3d
            colors.Add(30, new MapColor(70, 57, 56)); // 30 - olthoi - 0x06006d3e
            colors.Add(31, new MapColor(102, 88, 72)); // 31 - DesolateLands - 0x06006d6f
            colors.Add(32, new MapColor(112, 116, 105)); // 32 - roads - 0x06006d3f
            return colors;
        }


    /// <summary>
    /// Functions like the Region.LandDefs.Land_Height_Table from (client_)portal.dat 0x13000000
    /// </summary>
    /// <param name="height"></param>
    /// <returns></returns>
    public static int GetLandheight(byte height)
        {
            if (height <= 200)
                return height * 2;
            else if (height <= 240)
                return 400 + (height - 200) * 4;
            else if (height <= 250)
                return 560 + (height - 240) * 8;
            else
                return 640 + (height - 250) * 10;
        }


    }
}
